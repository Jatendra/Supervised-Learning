'''This file is generated by Jatendra Guatam

Objective : to create a random forest classifer for loan prediction

This will include base model to best tuned model

As we are working on another cart basel modeling, hence must be easy to deliver

'''

import os
import Utils
from IPython.display import display

import numpy as np
import random

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import RandomizedSearchCV, StratifiedKFold

path = r"C:\Users\jaten\Downloads\Sapient_Data\data\Refined_Dataset.csv"
input_data = Utils.load_data(path)

display(input_data.shape)
display(input_data.info())
display(Utils.null_finding(input_data))

# Train Test Split

train_x, train_y, val_x, val_y, test_x, test_y = Utils.train_test_validation_splits(input_data,'Default',0.33,0.0,True,'ID')

display(train_x.shape)

## Base Model

def base_rf_classifier_train(X,Y):

    base_rf = RandomForestClassifier(n_estimators=300, criterion='gini', max_depth= 10, random_state=42)

    base_rf.fit(X,Y)

    return base_rf


base_rf = base_rf_classifier_train(train_x,train_y)

Utils.find_model_performance_sklearn(base_rf,test_x,test_y)


## Refined model

def set_tuning_params_rf():
    param_grid = {
        'n_estimators' : np.random.randint(100,1000,5),
        'criterion' : ['gini','entropy'],
        'max_depth' : np.random.randint(3,32,8),
        'max_features' : ['sqrt','log2',None],
        'min_samples_leaf' : np.random.randint(2,24,6),
        'min_weight_fraction_leaf' : np.linspace(.05,0.5,5),
        'min_impurity_decrease' : np.linspace(0.1,1,5),
        'class_weight' : ['balanced']
    }
    return param_grid


def rf_model_tuning(params,X,Y,cv) :

    model_rf = RandomForestClassifier(random_state=42)

    kfold_cv = StratifiedKFold(n_splits=cv,shuffle=True,random_state=42)

    random_cv = RandomizedSearchCV(model_rf,param_distributions=params,n_iter=10,\
                                   scoring='f1',n_jobs=-1,cv=kfold_cv,verbose=True,random_state=42, error_score='raise')
    random_cv.fit(X,Y)
    
    return random_cv

rf_cv_results = rf_model_tuning(set_tuning_params_rf(),train_x, train_y, 5)

display(rf_cv_results.best_score_)

best_rf_classifier = rf_cv_results.best_estimator_

Utils.find_model_performance_sklearn(best_rf_classifier,test_x,test_y)


'''
np.random.randint(1,100,10) # -> 
np.random.random(5) # -> 0-1, size=10
np.random.randn(5)
np.random.random_sample(5)
np.arange(1,5)
np.random.randint(0,1,10)
np.linspace(.05,1,5)
'''


